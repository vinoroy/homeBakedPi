#!/usr/bin/env python
"""
@author: Vincent Roy []

This module contains an event queue class that is responsible for storing and handling untreated events as they are
generated by the homeBakedPi sensor network.

"""


from events import *


class EventQueue():
    """
    This class is responsible for storing and handling untreated events as they are generated by the homeBakedPi sensor
    network.

    Attributes :
        - queue : (Event list) array list of all the untreated events
       object

    """

    def __init__(self):
        self.queue = []

        print 'Event queue created'



    def addEventToQueue(self,event):
        """
        Appends an event to the event queue if it is of the right type

        Args :
            - evt : (event object) event generated by one of the sensors in the network

        Return :
            - none

        """

        if isinstance( event, Event ):
            self.queue.append(event)


    def rmEventFrmPool(self):
        """
        Remove the oldest event in the event queue (FIFO)

        Args :
            - none

        Return :
            - (event object) the oldest event object

        """

        if len(self.queue) > 0:
            return self.queue.remove(self.queue[0])


    def getEventQLength(self):
        """
        Returns the length of the event queue

        Args :
            - none

        Return :
            - (int) length of the event queue

        """

        return len(self.queue)


    def handleEvents(self):
        """
        This is a handler that essentially requests each registered event to perform their list of actions

        Args :
            - none

        Return :
            - none

        """

        for event in self.queue:


            event.performAssociatedActions()



    def getEvent(self,type,nodeID,instID):
        """
        This functions gets from the queue a specific event based on the the type and id of the event

        Args :
            - none

        Return :
            - (Event) : reference to the event that corresponds to the query

        """


        for event in self.queue:

            if event.eventType == type and event.nodeID == nodeID and event.instID == instID:

                return event


        return None



    def printEvents(self):
        """
        This functions prints to console the info on each event

        Args :
            - none

        Return :
            - none

        """

        for event in self.queue:

            event.printEventInfo()






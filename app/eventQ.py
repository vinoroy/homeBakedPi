#!/usr/bin/env python
"""
@author: Vincent Roy []

This module contains an event queue class that is responsible for storing and handling untreated events as they are
generated by the homeBakedPi sensor network.

"""


from events import *


class EventQ():
    """
    This class is responsible for storing and handling untreated events as they are generated by the homeBakedPi sensor
    network.

    Attributes :
        - hub : (Hub) refernce to the associated hub object
        - queue : (Event list) array list of all the untreated events
       object

    """

    def __init__(self,hub):
        self.hub = hub
        self.queue = []


    def getHub(self):
        """
        Returns the reference to the hub object

        Args :
            - none

        Return :
            - (Hub) reference to the hub object

        """

        return self.hub


    def addEventToQueue(self,event):
        """
        Appends an event to the event queue if it is of the right type

        Args :
            - event : (Event) event generated by one of the sensors in the network

        Return :
            - none

        """

        if isinstance( event, Event ):
            self.queue.append(event)


    def rmEventFrmQueue(self):
        """
        Remove the oldest event in the event queue (FIFO) and return it to the requester

        Args :
            - none

        Return :
            - (Event) the oldest event object

        """

        if len(self.queue) > 0:

            firstElement = self.queue[0]

            self.queue.remove(firstElement)

            return firstElement


    def getEventQLength(self):
        """
        Returns the length of the event queue

        Args :
            - none

        Return :
            - (int) length of the event queue

        """

        return len(self.queue)


    def handleEvents(self):
        """
        This is a handler that essentially requests each registered event to perform their list of actions. The events
        are removed from the queue as they are processed

        Args :
            - none

        Return :
            - none

        """

        while self.getEventQLength() > 0:

            event = self.rmEventFrmQueue()

            event.performAssociatedActions()



    def printEvents(self):
        """
        This functions prints to console the info on each event

        Args :
            - none

        Return :
            - none

        """

        for event in self.queue:

            event.printEventInfo()





